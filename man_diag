#!/bin/bash
#
# man_diag - a script to run diagnostic commands and save output to a log file
#
# Author: Cal Lott <cal.lott@manheim.com>
#
PATH=$PATH:$HOME/bin:/bin/:/usr/bin:/sbin:/usr/sbin

# Set a script name and version string for later use.
SCRIPT_NAME=$(basename $0)
VERSION="$SCRIPT_NAME v1.08 2013-04-08"
ORIGINAL_COMMAND_LINE="$0 $*"
LOCALHOST=$(uname -n | awk -F. '{print $1}')
DEFAULT_OUTPUT_DIR=${HOME}/log

# Declare some functions.

# Prints argument to stdout, prepended with "[YYYYMMDD-HH:MM:SS] ".
function dateprint {
  echo "[$(date +%Y%m%d-%H:%M:%S)] $*"
}

# Runs argument list as a single shell command.
BAR_SEPARATOR='------------------------------------------------'
function run {
  echo
  echo $BAR_SEPARATOR
  dateprint "START: $*"
  executable=$(echo $* | awk '{print $1}')
  dateprint "path to executable: $(which $executable 2>/dev/null)" 
  $*
  last_exit_code=$?
  cumulative_exit_code=$(( $cumulative_exit_code + $last_exit_code ))
  dateprint "exit $last_exit_code"
  dateprint "END: $*"
  echo $BAR_SEPARATOR
  echo
}

# Print usage information.
function usage {
  cat << EOF

$SCRIPT_NAME - run a set of standard diagnostic commands

Usage: $SCRIPT_NAME [ -d dir ] [-l file] [-jz] [-hv] <pid1> <pid2> ... <pidN>

This script runs several diagnostic commands on the local system and saves the
output to a gzipped log file. You may also specify an optional list of pids,
which will cause additional diagnostic commands (lsof, jstat, etc.) to be run
against those specific processes only.

The default path for the datestamped log file for this userid on this host is
as follows:

  $DEFAULT_OUTPUT_DIR/$SCRIPT_NAME.\$LOCALHOST.YYYYMMDD-HHMMSS.log

You can override the default file name and location with the -l option. (See
below.)


Options:
-d            Use specified output directory instead of default
-j            Also process any pids listed in output of "jps" command.
-l <logfile>  Use specified log file instead of default.
-z            Do not gzip log file.

Other Options:
-h            Print this message and exit.
-v            Print version string and exit.

EOF
}

# Print version information.
function version {
  echo $VERSION
}

# Print help information.
function help {
  version
  usage
}

# Command line options processing.
while getopts "d:hjl:vz" OPTION
do
  case $OPTION in
    d)
      DEFAULT_OUTPUT_DIR=$OPTARG
    ;;
    h)
      help
      exit 0
    ;;
    j)
      USE_JPS='TRUE'
    ;;
    l)
      DIAG_LOGFILE=$OPTARG
    ;;
    v)
      version
      exit 0
    ;;
    z)
      COMPRESSION_OPTION='DISABLED'
    ;;
    ?)
      usage
      exit 1
    ;;
  esac
done
shift $((OPTIND-1))  # remove processed arguments from $*
PIDLIST=$*           # save list of remaining args as pidlist

# If requested, use jps to get an additional list of java pids.
if [ "$USE_JPS" == 'TRUE' ]
then
  # Check to make sure we can actually run jps
  jps >/dev/null 2>&1
  # Complain if it returns an error
  if [ $? -ne 0 ]; then
    dateprint "WARNING: \"jps\" command for -j option returned an error!" 1>&2
    dateprint "Diagnostic output may not contain all expected information." 1>&2
    dateprint "Please check to make sure that \"jps\" is in this user's \$PATH" 1>&2
    dateprint "Ignoring error and continuing with script execution" 1>&2
  else
    # Save the current list of pids.
    arg_pids=$PIDLIST
    # Use jps to grab additional java pids, filtering the jps pid itself.
    jps_pids=$(jps 2>/dev/null | awk '$2 !~ /^Jps/ {print $1}')
    # Now obtain an unique sorted list of pids from both groups.
    PIDLIST=$(echo $arg_pids $jps_pids | sort | uniq)
  fi
fi

# Use the default logfile if the user did not specify one.
if [ "$DIAG_LOGFILE" = '' ]
then
  DIAG_LOGFILE="$DEFAULT_OUTPUT_DIR/$SCRIPT_NAME.$LOCALHOST.$(date +%Y%m%d-%H%M%S).log"
fi
# Create log directory if it does not already exist
mkdir $(dirname $DIAG_LOGFILE) >/dev/null 2>&1

# Print start message to stdout.
dateprint "BEGIN - running diagnostics for host: $(uname -n)"

# Also print the list of pids if it is not null.
if [ -n "$PIDLIST" ]
then
  dateprint "running additional diags for pids: $PIDLIST"
fi

# Complain and die if we cannot create the logfile.
touch $DIAG_LOGFILE >/dev/null 2>&1
if [ $? -eq 0 ]
then
  dateprint "logfile created, running diagnostic commands . . ."
else
  dateprint "ERROR: cannot create $DIAG_LOGFILE, exiting!" 2>&1
  exit 1
fi

# Save stdout and stderr descriptors and redirect output to logfile.
exec 6>&1            # Link file descriptor 6 with stdout (saves stdout)
exec 7>&2            # Link file descriptor 7 with stderr (saves stderr)
exec >$DIAG_LOGFILE 2>&1  # Redirect stdout and stdin to logfile

##
## Begin diagnostic output
##
dateprint "BEGIN DIAGNOSTIC OUTPUT"
dateprint "running on host: $(uname -n)"
dateprint "unprocessed command line: \"$ORIGINAL_COMMAND_LINE\""
dateprint "after options processing: \"$0 $PIDLIST > $DIAG_LOGFILE\""
dateprint "script version: \"$VERSION\""

# Each of the following shell commands will be run once.
for cmd in \
  "crontab -l" \
  "id" \
  "ifconfig -a" \
  "df -kl" \
  "env" \
  "iostat -x" \
  "jps -v" \
  "netstat -anp" \
  "netstat -r" \
  "ps -ef" \
  "ulimit -a" \
  "uname -a" \
  "uptime" \
  "w" \
; do
  run $cmd
done

# As above, but these commands are customized for a specific flavor of Unix.
OS=$(uname -s)
case $OS in
  Linux)
    for cmd in \
      "swapon -s" \
      "top -b -n1" \
    ; do
      run $cmd
    done
    ;;
  SunOS)
    for cmd in \
      "swap -s" \
      "top -b -d1" \
    ; do
      run $cmd
    done
  ;;
  *)
    dateprint "WARNING: OS \"$OS\" unknown - running no OS-specific commands" 2>&1
  ;;
esac

# Each of these commands are run once per each pid argument
for pid in $PIDLIST
do
  for cmd in \
    "lsof -p $pid" \
    "jstat -gcutil $pid" \
    "jmap -histo $pid" \
    "jstack -l $pid" \
  ; do
    run $cmd
  done
done

dateprint "END DIAGNOSTIC OUTPUT"
dateprint "cumulative exit code: $cumulative_exit_code"

exec 1>&6 6>&-   # Restore stdout and close file descriptor 6.
exec 2>&7 7>&-   # Restore stderr and close file descriptor 7.
##
## End diagnostic output
##

# Compress the logfile if requested and end script execution
if [ "$COMPRESSION_OPTION" = 'DISABLED' ]
then
  dateprint "FINISH - output stored at: $DIAG_LOGFILE"
else
  nohup gzip $DIAG_LOGFILE >/dev/null 2>&1 &
  dateprint "FINISH - output stored at: $DIAG_LOGFILE.gz"
fi

exit $cumulative_exit_code
